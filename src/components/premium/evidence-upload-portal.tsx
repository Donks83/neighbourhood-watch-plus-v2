'use client'

import React, { useState, useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { \n  Upload, \n  FileVideo, \n  FileImage, \n  Shield, \n  Clock, \n  CheckCircle2, \n  AlertCircle, \n  Download,\n  Eye,\n  Lock,\n  FileCheck,\n  Hash,\n  Calendar,\n  MapPin,\n  User,\n  XIcon\n} from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Input } from '@/components/ui/input'\nimport { cn } from '@/lib/utils'\n\ninterface EvidenceFile {\n  id: string\n  file: File\n  preview?: string\n  uploadProgress: number\n  status: 'pending' | 'uploading' | 'processing' | 'completed' | 'error'\n  metadata: {\n    originalName: string\n    size: number\n    type: string\n    duration?: number // for videos\n    resolution?: string\n    timestamp?: Date\n    location?: { lat: number; lng: number }\n  }\n  chainOfCustody?: {\n    uploaderId: string\n    uploadTime: Date\n    fileHash: string\n    verified: boolean\n  }\n  error?: string\n}\n\ninterface EvidenceRequest {\n  id: string\n  title: string\n  description: string\n  location: string\n  timeWindow: { start: Date; end: Date }\n  requestedBy: {\n    organization: string\n    role: 'police' | 'insurance' | 'security'\n    badgeNumber?: string\n  }\n  legalBasis: string\n  reward: number\n  urgency: 'routine' | 'priority' | 'urgent' | 'emergency'\n  deadline: Date\n}\n\ninterface EvidenceUploadPortalProps {\n  isOpen: boolean\n  onClose: () => void\n  evidenceRequest: EvidenceRequest\n  userRole: 'community' | 'verified_user'\n  onSubmitEvidence: (files: EvidenceFile[], message: string) => Promise<void>\n}\n\nconst MAX_FILE_SIZE = 500 * 1024 * 1024 // 500MB\nconst ACCEPTED_FILE_TYPES = {\n  'video/*': ['.mp4', '.avi', '.mov', '.wmv', '.mkv'],\n  'image/*': ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp']\n}\n\nconst URGENCY_COLORS = {\n  routine: 'gray',\n  priority: 'blue', \n  urgent: 'orange',\n  emergency: 'red'\n} as const\n\nexport default function EvidenceUploadPortal({\n  isOpen,\n  onClose,\n  evidenceRequest,\n  userRole,\n  onSubmitEvidence\n}: EvidenceUploadPortalProps) {\n  const [evidenceFiles, setEvidenceFiles] = useState<EvidenceFile[]>([])\n  const [message, setMessage] = useState('')\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [agreedToTerms, setAgreedToTerms] = useState(false)\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    const newFiles: EvidenceFile[] = acceptedFiles.map(file => {\n      const fileId = `file-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n      \n      // Create preview for images/videos\n      let preview: string | undefined\n      if (file.type.startsWith('image/')) {\n        preview = URL.createObjectURL(file)\n      }\n\n      return {\n        id: fileId,\n        file,\n        preview,\n        uploadProgress: 0,\n        status: 'pending',\n        metadata: {\n          originalName: file.name,\n          size: file.size,\n          type: file.type,\n          timestamp: new Date()\n        }\n      }\n    })\n    \n    setEvidenceFiles(prev => [...prev, ...newFiles])\n  }, [])\n\n  const { getRootProps, getInputProps, isDragActive, fileRejections } = useDropzone({\n    onDrop,\n    accept: ACCEPTED_FILE_TYPES,\n    maxSize: MAX_FILE_SIZE,\n    multiple: true\n  })\n\n  const removeFile = (fileId: string) => {\n    setEvidenceFiles(prev => {\n      const fileToRemove = prev.find(f => f.id === fileId)\n      if (fileToRemove?.preview) {\n        URL.revokeObjectURL(fileToRemove.preview)\n      }\n      return prev.filter(f => f.id !== fileId)\n    })\n  }\n\n  const simulateUpload = async (file: EvidenceFile) => {\n    // Simulate file upload with progress\n    setEvidenceFiles(prev => prev.map(f => \n      f.id === file.id ? { ...f, status: 'uploading' } : f\n    ))\n\n    // Simulate progress updates\n    for (let progress = 0; progress <= 100; progress += 10) {\n      await new Promise(resolve => setTimeout(resolve, 100))\n      setEvidenceFiles(prev => prev.map(f => \n        f.id === file.id ? { ...f, uploadProgress: progress } : f\n      ))\n    }\n\n    // Simulate processing and hash generation\n    setEvidenceFiles(prev => prev.map(f => \n      f.id === file.id ? { \n        ...f, \n        status: 'processing',\n        chainOfCustody: {\n          uploaderId: 'anonymous-user-' + Math.random().toString(36).substr(2, 8),\n          uploadTime: new Date(),\n          fileHash: 'sha256:' + Array.from({length: 64}, () => Math.floor(Math.random() * 16).toString(16)).join(''),\n          verified: true\n        }\n      } : f\n    ))\n\n    await new Promise(resolve => setTimeout(resolve, 1000))\n\n    setEvidenceFiles(prev => prev.map(f => \n      f.id === file.id ? { ...f, status: 'completed' } : f\n    ))\n  }\n\n  const uploadAllFiles = async () => {\n    const pendingFiles = evidenceFiles.filter(f => f.status === 'pending')\n    \n    for (const file of pendingFiles) {\n      await simulateUpload(file)\n    }\n  }\n\n  const handleSubmit = async () => {\n    if (!agreedToTerms) {\n      alert('Please agree to the terms and conditions')\n      return\n    }\n\n    setIsSubmitting(true)\n    \n    try {\n      // Upload any pending files first\n      await uploadAllFiles()\n      \n      // Submit evidence\n      await onSubmitEvidence(evidenceFiles, message)\n      \n      // Close portal\n      onClose()\n    } catch (error) {\n      console.error('Error submitting evidence:', error)\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes'\n    const k = 1024\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n  }\n\n  const getStatusIcon = (status: EvidenceFile['status']) => {\n    switch (status) {\n      case 'pending': return <Clock className=\"w-4 h-4 text-gray-500\" />\n      case 'uploading': return <Upload className=\"w-4 h-4 text-blue-500 animate-pulse\" />\n      case 'processing': return <FileCheck className=\"w-4 h-4 text-yellow-500 animate-spin\" />\n      case 'completed': return <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n      case 'error': return <AlertCircle className=\"w-4 h-4 text-red-500\" />\n      default: return <Clock className=\"w-4 h-4 text-gray-500\" />\n    }\n  }\n\n  const canSubmit = evidenceFiles.length > 0 && \n                   evidenceFiles.every(f => f.status === 'completed') && \n                   agreedToTerms && \n                   !isSubmitting\n\n  if (!isOpen) return null\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div className=\"fixed inset-0 bg-black/50 z-[1100]\" onClick={onClose} />\n      \n      {/* Modal */}\n      <div className=\"fixed inset-0 z-[1110] overflow-y-auto\">\n        <div className=\"flex min-h-full items-center justify-center p-4\">\n          <div className=\"relative bg-white dark:bg-gray-900 rounded-lg shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden\">\n            \n            {/* Header */}\n            <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950 dark:to-indigo-950\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div>\n                  <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                    Secure Evidence Upload\n                  </h2>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Chain of custody protected â€¢ Anonymous submission\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3\">\n                <Badge \n                  variant=\"outline\" \n                  className={`text-${URGENCY_COLORS[evidenceRequest.urgency]}-600 border-${URGENCY_COLORS[evidenceRequest.urgency]}-200 bg-${URGENCY_COLORS[evidenceRequest.urgency]}-50`}\n                >\n                  {evidenceRequest.urgency.toUpperCase()}\n                </Badge>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={onClose}\n                  className=\"w-8 h-8\"\n                >\n                  <XIcon className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Content */}\n            <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n              \n              {/* Request Details */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Evidence Request Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"font-medium text-gray-900 dark:text-white mb-2\">\n                      {evidenceRequest.title}\n                    </h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {evidenceRequest.description}\n                    </p>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <MapPin className=\"w-4 h-4 text-gray-500\" />\n                      <span>{evidenceRequest.location}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Calendar className=\"w-4 h-4 text-gray-500\" />\n                      <span>\n                        {evidenceRequest.timeWindow.start.toLocaleDateString()} - \n                        {evidenceRequest.timeWindow.end.toLocaleDateString()}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <User className=\"w-4 h-4 text-gray-500\" />\n                      <span>{evidenceRequest.requestedBy.organization}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-green-600\">\n                      <span className=\"font-medium\">Reward: Â£{evidenceRequest.reward}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-yellow-50 dark:bg-yellow-950 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3\">\n                    <div className=\"flex items-center gap-2 text-yellow-800 dark:text-yellow-200\">\n                      <Clock className=\"w-4 h-4\" />\n                      <span className=\"text-sm font-medium\">\n                        Deadline: {evidenceRequest.deadline.toLocaleDateString()} at {evidenceRequest.deadline.toLocaleTimeString()}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* File Upload Area */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Upload Evidence Files</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div\n                    {...getRootProps()}\n                    className={cn(\n                      \"border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors\",\n                      isDragActive \n                        ? \"border-blue-500 bg-blue-50 dark:bg-blue-950\" \n                        : \"border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500\"\n                    )}\n                  >\n                    <input {...getInputProps()} />\n                    <div className=\"flex flex-col items-center gap-4\">\n                      <div className=\"w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center\">\n                        <Upload className=\"w-8 h-8 text-gray-500\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                          {isDragActive ? 'Drop files here' : 'Drag & drop evidence files'}\n                        </h3>\n                        <p className=\"text-sm text-gray-500\">\n                          or <span className=\"text-blue-600 font-medium\">browse files</span> to upload\n                        </p>\n                        <p className=\"text-xs text-gray-400 mt-2\">\n                          Supports: Videos (MP4, AVI, MOV) and Images (JPG, PNG) â€¢ Max 500MB per file\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* File Rejection Errors */}\n                  {fileRejections.length > 0 && (\n                    <div className=\"mt-4 p-3 bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-800 rounded-lg\">\n                      <h4 className=\"text-sm font-medium text-red-800 dark:text-red-200 mb-2\">File Upload Errors:</h4>\n                      {fileRejections.map(({ file, errors }) => (\n                        <div key={file.name} className=\"text-sm text-red-600 dark:text-red-400\">\n                          â€¢ {file.name}: {errors.map(e => e.message).join(', ')}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Uploaded Files */}\n              {evidenceFiles.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Evidence Files ({evidenceFiles.length})</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {evidenceFiles.map((evidenceFile) => (\n                        <div \n                          key={evidenceFile.id}\n                          className=\"flex items-center gap-4 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\"\n                        >\n                          {/* File Icon/Preview */}\n                          <div className=\"w-12 h-12 bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center justify-center flex-shrink-0\">\n                            {evidenceFile.file.type.startsWith('video/') ? (\n                              <FileVideo className=\"w-6 h-6 text-blue-600\" />\n                            ) : (\n                              <FileImage className=\"w-6 h-6 text-green-600\" />\n                            )}\n                          </div>\n                          \n                          {/* File Details */}\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <h4 className=\"font-medium text-gray-900 dark:text-white truncate\">\n                                {evidenceFile.metadata.originalName}\n                              </h4>\n                              {getStatusIcon(evidenceFile.status)}\n                            </div>\n                            \n                            <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                              <span>{formatFileSize(evidenceFile.metadata.size)}</span>\n                              <span className=\"capitalize\">{evidenceFile.file.type.split('/')[0]}</span>\n                              {evidenceFile.chainOfCustody && (\n                                <div className=\"flex items-center gap-1 text-green-600\">\n                                  <Lock className=\"w-3 h-3\" />\n                                  <span>Secured</span>\n                                </div>\n                              )}\n                            </div>\n                            \n                            {/* Upload Progress */}\n                            {evidenceFile.status === 'uploading' && (\n                              <div className=\"mt-2\">\n                                <Progress value={evidenceFile.uploadProgress} className=\"h-2\" />\n                                <div className=\"text-xs text-gray-500 mt-1\">\n                                  Uploading... {evidenceFile.uploadProgress}%\n                                </div>\n                              </div>\n                            )}\n                            \n                            {/* Chain of Custody Info */}\n                            {evidenceFile.chainOfCustody && (\n                              <div className=\"mt-2 p-2 bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded text-xs\">\n                                <div className=\"flex items-center gap-2 text-green-800 dark:text-green-200\">\n                                  <Hash className=\"w-3 h-3\" />\n                                  <span className=\"font-mono\">{evidenceFile.chainOfCustody.fileHash.substring(0, 32)}...</span>\n                                </div>\n                                <div className=\"text-green-600 dark:text-green-400 mt-1\">\n                                  Uploaded: {evidenceFile.chainOfCustody.uploadTime.toLocaleString()}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                          \n                          {/* Actions */}\n                          <div className=\"flex items-center gap-2\">\n                            {evidenceFile.preview && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => window.open(evidenceFile.preview, '_blank')}\n                                className=\"w-8 h-8\"\n                              >\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                            )}\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => removeFile(evidenceFile.id)}\n                              className=\"w-8 h-8 text-red-500 hover:text-red-700\"\n                            >\n                              <XIcon className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {/* Upload All Button */}\n                      {evidenceFiles.some(f => f.status === 'pending') && (\n                        <Button\n                          onClick={uploadAllFiles}\n                          className=\"w-full\"\n                          disabled={isSubmitting}\n                        >\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          Secure Upload All Files\n                        </Button>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Additional Message */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Additional Information (Optional)</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Textarea\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    placeholder=\"Provide any additional context about the evidence, what it shows, or timing details that might be helpful...\"\n                    rows={4}\n                    className=\"resize-none\"\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Legal Terms */}\n              <Card className=\"border-blue-200 dark:border-blue-800\">\n                <CardContent className=\"p-4\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium text-blue-900 dark:text-blue-100\">\n                      ðŸ”’ Legal and Privacy Protection\n                    </h4>\n                    \n                    <div className=\"space-y-2 text-sm text-blue-800 dark:text-blue-200\">\n                      <div className=\"flex items-start gap-2\">\n                        <CheckCircle2 className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                        <span>Your identity remains anonymous in all legal proceedings</span>\n                      </div>\n                      <div className=\"flex items-start gap-2\">\n                        <CheckCircle2 className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                        <span>Files are encrypted and chain of custody is automatically maintained</span>\n                      </div>\n                      <div className=\"flex items-start gap-2\">\n                        <CheckCircle2 className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                        <span>Evidence may be used in legal proceedings or insurance claims</span>\n                      </div>\n                      <div className=\"flex items-start gap-2\">\n                        <CheckCircle2 className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                        <span>Reward payment processed within 3-5 business days after verification</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"terms\"\n                        checked={agreedToTerms}\n                        onChange={(e) => setAgreedToTerms(e.target.checked)}\n                        className=\"rounded\"\n                      />\n                      <Label htmlFor=\"terms\" className=\"text-sm\">\n                        I agree to the terms and understand that this evidence may be used in legal proceedings\n                      </Label>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Footer */}\n            <div className=\"border-t border-gray-200 dark:border-gray-700 p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-gray-500\">\n                  {evidenceFiles.length} file(s) â€¢ Estimated reward: Â£{evidenceRequest.reward}\n                </div>\n                \n                <div className=\"flex items-center gap-3\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={onClose}\n                    disabled={isSubmitting}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleSubmit}\n                    disabled={!canSubmit}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                  >\n                    {isSubmitting ? (\n                      <>\n                        <Upload className=\"w-4 h-4 mr-2 animate-pulse\" />\n                        Submitting Evidence...\n                      </>\n                    ) : (\n                      <>\n                        <Shield className=\"w-4 h-4 mr-2\" />\n                        Submit Evidence\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n